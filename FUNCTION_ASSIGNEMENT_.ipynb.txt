{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "#Theoretical QUESTION"
      ],
      "metadata": {
        "id": "YLY77Oh2g8og"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "(Que.1)What is the difference between a function anand method in Python?\n",
        "\n",
        "Ans.\n",
        "\n",
        "functions and methods are similar in that both are blocks of reusable code, but they differ in how they are defined and used:\n",
        "\n",
        "1. Function:\n",
        "A function is defined using the def keyword.It can exist independently of any object.You call a function by its name.\n",
        "\n",
        "Example:\n",
        "Syntex of functions\n",
        "\n",
        "def fun():\n",
        "     Do something >>> body of function\n",
        "   \n",
        "2. Method:\n",
        "A method is a function that is associated with an object.It is defined inside a class and take at least one parameter, usually self.\n",
        "\n",
        "we call a method on an object using dot notatio.\n",
        "\n",
        "\n",
        "(Que.2).Explain the concept of function arguments and parameters in Python?\n",
        "\n",
        "Ans:\n",
        "1. Parameters:\n",
        "These are placeholders defined in the function signature.You specify them when defining a function.They define what kind of input the function expects.\n",
        "\n",
        "2. Arguments:\n",
        "These are the actual values you pass to the function when calling it.They match the parameters defined in the function.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "(Que.4) What is the purpose of the `return` statement in a Python function?\n",
        "ANS.\n",
        ".The return statement in a Python function is used to Send a result back to the caller.\n",
        ".It specifies the value (or values) that should be returned from the function to where it was called.\n",
        ".It immediately stops the function's execution and exits it.\n",
        "\n",
        "Example\n",
        "def_add (a ,b):\n",
        "    return a + b\n",
        "\n",
        "result = add(3, 4)  # result is now 7\n",
        "\n",
        "(Que.5) What are iterators in Python and how do they differ from iterables\n",
        "ANS.\n",
        "In Python, iterators and iterables are closely related but distinct concepts used in iteration (e.g., in for loops).\n",
        "\n",
        "Iterable\n",
        "An iterable is any Python object/ data structure capable of returning its members one at a time. It implements the __iter__() method, which returns an iterator.\n",
        "\n",
        "Examples of iterables:\n",
        "\n",
        "Lists: [1, 2, 3]\n",
        "\n",
        "Tuples: (1, 2, 3)\n",
        "\n",
        "Strings: \"abc\"\n",
        "\n",
        "Sets, dictionaries, files\n",
        "\n",
        "You can use them in a for loop because they can be converted to an iterator.\n",
        "\n",
        "Iterator\n",
        "An iterator is an object with two methods:\n",
        "__iter__() → returns the iterator object itself.\n",
        "__next__() → returns the next item in the sequence. Raises StopIteration when items are exhausted.\n",
        "We can get an iterator from an iterable by calling iter() on it:\n",
        "\n",
        "nums = [1, 2, 3]\n",
        "it = iter(nums)  # 'it' is now an iterator\n",
        "\n",
        "print(next(it))  # 1 Output\n",
        "print(next(it))  # 2 Output\n",
        "\n",
        "\n",
        "(Que.6). Explain the concept of generators in Python and how they are defined ?\n",
        "ANS.\n",
        "In Python, generators are a way to create iterators in a simple and efficient manner. They allow you to iterate over data without storing the entire dataset in memory, which is especially useful for large datasets or streams of data.\n",
        "\n",
        "A generator is a function that behaves like an iterator. Instead of returning a single value nd exiting .(like a normal function with return)\n",
        "generator function defines like a normal function, but use yield instead of return.\n",
        "\n",
        "(Que.7) .What are the advantages of using generators over regular functions?\n",
        "ANS.\n",
        "Generators offer several advantages over regular functions, especially when dealing with large datasets or streams of data. Here are the key benefits:\n",
        "\n",
        "1. Memory Efficiency\n",
        "Generators yield one item at a time using the yield keyword, which means they don’t store the entire sequence in memory. This is useful for handling large datasets or infinite sequences.\n",
        "\n",
        "2. Lazy Evaluation\n",
        "They compute values on the fly and only when requested. This can significantly improve performance and reduce latency, particularly when the full set of results isn't needed.\n",
        "\n",
        "3. State Retention\n",
        "Generators automatically preserve their state between calls. This means you don’t have to manage an external counter or keep track of previous results manually.\n",
        "\n",
        "4. Improved Performance\n",
        "Because they don’t compute and store all results at once, generators can start yielding results sooner and often run faster when only a portion of the data is needed.\n",
        "\n",
        "5. Simpler Code for Iterators\n",
        "Generators simplify the implementation of custom iterators. Instead of writing a class with __iter__() and __next__() methods, you can use a generator function with yield.\n",
        "\n",
        "(Que.8). What is a lambda function in Python and when is it typically used?\n",
        "ANS.\n",
        "lambda function in Python is a small, anonymous function defined using the lambda keyword. It can take any number of arguments but can only have one expression.\n",
        "Lambda functions are commonly used for short As a key for sorting With map(), filter(), and reduce().\n",
        "\n",
        "(Que.9). Explain the purpose and usage of the `map()` function in Python?\n",
        "ANS.\n",
        "The map() function in Python is used to apply a function to all the items in an iterable (like a list, tuple, etc.) and return a new iterable (a map object) with the results.\n",
        "\n",
        "Purpose:\n",
        "To transform data efficiently by applying a function to each element in an iterable without using explicit loops.\n",
        "\n",
        "(Que.10). What is the difference between `map()`, `reduce()`, and `filter()` functions in Python?\n",
        "ANS.\n",
        "map(): Applies a function to each item in an iterable → transforms items.\n",
        "filter(): Keeps items for which the function returns True → filters items.\n",
        "reduce(): Applies a function cumulatively to reduce all items to a single value.\n",
        "\n",
        "\n",
        "(Que.11). Using pen & Paper write the internal mechanism for sum operation using reduce function on this given list:[47,11,42,13];\n"
      ],
      "metadata": {
        "id": "kxv1856afn3f"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "practrical  *quieswtion*\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "EcIpgVKGrlbA"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "arTKiKpBTDGJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Q1. Write a Python function that takes a list of numbers as input and returns the sum of all even numbers in the list.\n",
        "\n",
        "#ans\n",
        "i = [1, 2, 3, 4, 5, 6]\n",
        "result = sum(num for num in i if num % 2 == 0)\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "urJ7AlnPr8-A",
        "outputId": "2b4becfa-1baf-4a07-f1dd-e09691d1da95"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "12\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q2. Create a Python function that accepts a string and returns the reverse of that string?\n",
        "ulta=\"QWERTYUIOP\"\n",
        "result=ulta[::-1]\n",
        "print(result)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-UKn4cnds4UE",
        "outputId": "2c26f63f-2dad-4dc9-8b91-e61638a7ef19"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "POIUYTREWQ\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q3. Implement a Python function that takes a list of integers and returns a new list containing the squares of each number?\n",
        "def square_list(numbers):\n",
        "    return [x**2 for x in numbers]\n",
        "print(square_list([1, 2, 3, 4]))\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "63wpasOAuZ04",
        "outputId": "3725e1f4-19f6-4997-b5f1-486a923ea263"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 4, 9, 16]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q4. Write a Python function that checks if a given number is prime or not from 1 to 200?\n",
        "def is_prime(n):\n",
        "    if n < 2:\n",
        "        return False\n",
        "    for i in range(2, int(n**0.5) + 1):\n",
        "        if n % i == 0:\n",
        "            return False\n",
        "    return True"
      ],
      "metadata": {
        "id": "XggS084cw7mx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(1, 201):\n",
        "    if is_prime(i):\n",
        "        print(f\"{i} is a prime number.\")\n",
        "    else:\n",
        "        print(f\"{i} is not a prime number.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TvSbI9a29-If",
        "outputId": "02cee7c3-78b4-4aa7-ab85-6916fadc630a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 is not a prime number.\n",
            "2 is a prime number.\n",
            "3 is a prime number.\n",
            "4 is not a prime number.\n",
            "5 is a prime number.\n",
            "6 is not a prime number.\n",
            "7 is a prime number.\n",
            "8 is not a prime number.\n",
            "9 is not a prime number.\n",
            "10 is not a prime number.\n",
            "11 is a prime number.\n",
            "12 is not a prime number.\n",
            "13 is a prime number.\n",
            "14 is not a prime number.\n",
            "15 is not a prime number.\n",
            "16 is not a prime number.\n",
            "17 is a prime number.\n",
            "18 is not a prime number.\n",
            "19 is a prime number.\n",
            "20 is not a prime number.\n",
            "21 is not a prime number.\n",
            "22 is not a prime number.\n",
            "23 is a prime number.\n",
            "24 is not a prime number.\n",
            "25 is not a prime number.\n",
            "26 is not a prime number.\n",
            "27 is not a prime number.\n",
            "28 is not a prime number.\n",
            "29 is a prime number.\n",
            "30 is not a prime number.\n",
            "31 is a prime number.\n",
            "32 is not a prime number.\n",
            "33 is not a prime number.\n",
            "34 is not a prime number.\n",
            "35 is not a prime number.\n",
            "36 is not a prime number.\n",
            "37 is a prime number.\n",
            "38 is not a prime number.\n",
            "39 is not a prime number.\n",
            "40 is not a prime number.\n",
            "41 is a prime number.\n",
            "42 is not a prime number.\n",
            "43 is a prime number.\n",
            "44 is not a prime number.\n",
            "45 is not a prime number.\n",
            "46 is not a prime number.\n",
            "47 is a prime number.\n",
            "48 is not a prime number.\n",
            "49 is not a prime number.\n",
            "50 is not a prime number.\n",
            "51 is not a prime number.\n",
            "52 is not a prime number.\n",
            "53 is a prime number.\n",
            "54 is not a prime number.\n",
            "55 is not a prime number.\n",
            "56 is not a prime number.\n",
            "57 is not a prime number.\n",
            "58 is not a prime number.\n",
            "59 is a prime number.\n",
            "60 is not a prime number.\n",
            "61 is a prime number.\n",
            "62 is not a prime number.\n",
            "63 is not a prime number.\n",
            "64 is not a prime number.\n",
            "65 is not a prime number.\n",
            "66 is not a prime number.\n",
            "67 is a prime number.\n",
            "68 is not a prime number.\n",
            "69 is not a prime number.\n",
            "70 is not a prime number.\n",
            "71 is a prime number.\n",
            "72 is not a prime number.\n",
            "73 is a prime number.\n",
            "74 is not a prime number.\n",
            "75 is not a prime number.\n",
            "76 is not a prime number.\n",
            "77 is not a prime number.\n",
            "78 is not a prime number.\n",
            "79 is a prime number.\n",
            "80 is not a prime number.\n",
            "81 is not a prime number.\n",
            "82 is not a prime number.\n",
            "83 is a prime number.\n",
            "84 is not a prime number.\n",
            "85 is not a prime number.\n",
            "86 is not a prime number.\n",
            "87 is not a prime number.\n",
            "88 is not a prime number.\n",
            "89 is a prime number.\n",
            "90 is not a prime number.\n",
            "91 is not a prime number.\n",
            "92 is not a prime number.\n",
            "93 is not a prime number.\n",
            "94 is not a prime number.\n",
            "95 is not a prime number.\n",
            "96 is not a prime number.\n",
            "97 is a prime number.\n",
            "98 is not a prime number.\n",
            "99 is not a prime number.\n",
            "100 is not a prime number.\n",
            "101 is a prime number.\n",
            "102 is not a prime number.\n",
            "103 is a prime number.\n",
            "104 is not a prime number.\n",
            "105 is not a prime number.\n",
            "106 is not a prime number.\n",
            "107 is a prime number.\n",
            "108 is not a prime number.\n",
            "109 is a prime number.\n",
            "110 is not a prime number.\n",
            "111 is not a prime number.\n",
            "112 is not a prime number.\n",
            "113 is a prime number.\n",
            "114 is not a prime number.\n",
            "115 is not a prime number.\n",
            "116 is not a prime number.\n",
            "117 is not a prime number.\n",
            "118 is not a prime number.\n",
            "119 is not a prime number.\n",
            "120 is not a prime number.\n",
            "121 is not a prime number.\n",
            "122 is not a prime number.\n",
            "123 is not a prime number.\n",
            "124 is not a prime number.\n",
            "125 is not a prime number.\n",
            "126 is not a prime number.\n",
            "127 is a prime number.\n",
            "128 is not a prime number.\n",
            "129 is not a prime number.\n",
            "130 is not a prime number.\n",
            "131 is a prime number.\n",
            "132 is not a prime number.\n",
            "133 is not a prime number.\n",
            "134 is not a prime number.\n",
            "135 is not a prime number.\n",
            "136 is not a prime number.\n",
            "137 is a prime number.\n",
            "138 is not a prime number.\n",
            "139 is a prime number.\n",
            "140 is not a prime number.\n",
            "141 is not a prime number.\n",
            "142 is not a prime number.\n",
            "143 is not a prime number.\n",
            "144 is not a prime number.\n",
            "145 is not a prime number.\n",
            "146 is not a prime number.\n",
            "147 is not a prime number.\n",
            "148 is not a prime number.\n",
            "149 is a prime number.\n",
            "150 is not a prime number.\n",
            "151 is a prime number.\n",
            "152 is not a prime number.\n",
            "153 is not a prime number.\n",
            "154 is not a prime number.\n",
            "155 is not a prime number.\n",
            "156 is not a prime number.\n",
            "157 is a prime number.\n",
            "158 is not a prime number.\n",
            "159 is not a prime number.\n",
            "160 is not a prime number.\n",
            "161 is not a prime number.\n",
            "162 is not a prime number.\n",
            "163 is a prime number.\n",
            "164 is not a prime number.\n",
            "165 is not a prime number.\n",
            "166 is not a prime number.\n",
            "167 is a prime number.\n",
            "168 is not a prime number.\n",
            "169 is not a prime number.\n",
            "170 is not a prime number.\n",
            "171 is not a prime number.\n",
            "172 is not a prime number.\n",
            "173 is a prime number.\n",
            "174 is not a prime number.\n",
            "175 is not a prime number.\n",
            "176 is not a prime number.\n",
            "177 is not a prime number.\n",
            "178 is not a prime number.\n",
            "179 is a prime number.\n",
            "180 is not a prime number.\n",
            "181 is a prime number.\n",
            "182 is not a prime number.\n",
            "183 is not a prime number.\n",
            "184 is not a prime number.\n",
            "185 is not a prime number.\n",
            "186 is not a prime number.\n",
            "187 is not a prime number.\n",
            "188 is not a prime number.\n",
            "189 is not a prime number.\n",
            "190 is not a prime number.\n",
            "191 is a prime number.\n",
            "192 is not a prime number.\n",
            "193 is a prime number.\n",
            "194 is not a prime number.\n",
            "195 is not a prime number.\n",
            "196 is not a prime number.\n",
            "197 is a prime number.\n",
            "198 is not a prime number.\n",
            "199 is a prime number.\n",
            "200 is not a prime number.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q5=Create an iterator class in Python that generates the Fibonacci sequence up to a specified number of term ?\n",
        "#ans.\n",
        "def fib(n):\n",
        "  a=0\n",
        "  b=1\n",
        "  for i in range(n):\n",
        "    yield a\n",
        "    a,b = b, a+b"
      ],
      "metadata": {
        "id": "xnQzK9K4TL2E"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "f=fib(50)\n",
        "f"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BpE8emLXerm7",
        "outputId": "d19c2370-62dc-4123-b9d7-2f5e57f428bf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<generator object fib at 0x7eb082abcf40>"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "next(f)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7NhY8TtVP5LY",
        "outputId": "8c834aa7-79e8-4749-ae39-ea87c595fb99"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "next(f)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3wGXSc9BP5hz",
        "outputId": "692c183f-7bd4-45db-f503-84a41ef3b11d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "next(f)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IDun7JgbP5tc",
        "outputId": "7aaddc7a-f238-403b-ddf9-d9fb0b785f68"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "next(f)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jG3wYKGJP523",
        "outputId": "90985e65-023a-4187-e282-f3c0fd47a0f0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "next(f)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hFGMAm9qP6Ca",
        "outputId": "64db2c69-b841-4844-95ee-6dedc2a732b9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q6=Write a generator function in Python that yields the powers of 2 up to a given exponent?\n",
        "#and\n",
        "def powers_of_two(n):\n",
        "    for i in range(n+ 1):\n",
        "      yield 2 ** i"
      ],
      "metadata": {
        "id": "HSUfIIrwTL4x"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "powers_of_two(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bdMo1BJXRNso",
        "outputId": "86ad0337-be93-42e4-b1bf-77a0129ce044"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<generator object powers_of_two at 0x7c623c7ae7a0>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gen = powers_of_two(5)"
      ],
      "metadata": {
        "id": "WYMPw6JORNyq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "next(gen)"
      ],
      "metadata": {
        "id": "H1kuX5QWRN7Z",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7f54dc6d-b973-460b-dc49-6efd4d08bc17"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "next(gen)"
      ],
      "metadata": {
        "id": "gke2LSHiROCS",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "17c85fcc-21ed-49bd-8707-d7213feafe71"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "next(gen)"
      ],
      "metadata": {
        "id": "sHgMxprARPn2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "81c03755-cd4d-4a3e-9edc-94d978857bc6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "next(gen)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aLe8retg89lm",
        "outputId": "e7302534-4d7a-4ee3-af0b-4867d917908d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "8"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "next(gen)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JRDwAXkc89XT",
        "outputId": "3b2c6c79-34d8-4d36-da4e-04c16f1575fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "16"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "next(gen)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pDV6ClFH89aj",
        "outputId": "f14ff61c-e4e9-4b1a-8cde-ef6218aeb1d4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "32"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q8 =8. Use a lambda function in Python to sort a list of tuples based on the second element of each tuple\n",
        "#ans\n",
        "\n",
        "X = [(2, 6), (3, 40), (5, 11), (2, 3)]\n",
        "\n",
        "sorted(X, key=lambda x: x[1])"
      ],
      "metadata": {
        "id": "L9cWTcFhTMCt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ed677597-cce5-469a-93a8-4a146c841100"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[(2, 3), (2, 6), (5, 11), (3, 40)]"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q9=9. Write a Python program that uses `map()` to convert a list of temperatures from Celsius to Fahrenheit?\n",
        "#ans.\n",
        "celsius_temps = [0, 20, 37, 100]\n",
        "list(map(lambda x: (x * 9/5) + 32, celsius_temps))"
      ],
      "metadata": {
        "id": "ChNb6NrKTMMO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a18e19d6-bb2a-47ee-9148-29a33684458b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[32.0, 68.0, 98.6, 212.0]"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q10=10. Create a Py thon program that uses `filter()` to remove all the vowels from a given string\n",
        "#ans\n",
        "def remove_vowels(s):\n",
        "  return ''.join(filter(lambda x: x.lower() not in \"aeiou\" , s))\n",
        "print(remove_vowels(\" kgtsfcmbgxhggadagcncmnjvjnhdddjbaieoueoekmmb\"))"
      ],
      "metadata": {
        "id": "xbaCiFJjTMR1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2a46e3cc-d9f9-42d9-b158-c63a05e607e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " kgtsfcmbgxhggdgcncmnjvjnhdddjbkmmb\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q1111) Imagine an accounting routine used in a book shop. It works on a list with sublists, which look like this:\n",
        "\n",
        "#Write a Python program, which returns a list with 2-tuples. Each tuple consists of the order number and the product of the price per item and the quantity. The product should be increased by 10,- € if the value of the"
      ],
      "metadata": {
        "id": "hpflyPJXTKVY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "order=[32587,\"learning python, mark lutz\",4,40.95],[98762,\"programming python,mark litz\",5,56.80],[77226,\"Head first method paul bary\",3,32.95],[88112,\"einfihrung in python,bernd klein\",3,24.99]\n",
        "result = list(map(lambda order: (order[0],round(order[2]*order[3]+(10 if order[2]*order[3] < 100 else 0), 2)),order))\n"
      ],
      "metadata": {
        "id": "m3MGitJVTKYN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(result)"
      ],
      "metadata": {
        "id": "zUGQpkpITKaZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c555f2be-ad74-4c4e-8d14-28f62d10e04e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[(32587, 163.8), (98762, 284.0), (77226, 108.85), (88112, 84.97)]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ojmff2W7TLwh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "N6UNmuOLTDfG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "g7rJ09aXTHQ2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "NTM48rajTJCq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "45CwuoV-TKP6"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}